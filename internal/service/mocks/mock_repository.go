// Code generated by MockGen. DO NOT EDIT.
// Source: songLibrary/internal/service (interfaces: Repository,MusicInfo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	domain "songLibrary/internal/domain"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(arg0 context.Context, arg1 *domain.Song) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockRepository) Delete(arg0 context.Context, arg1 *domain.SongInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), arg0, arg1)
}

// Read mocks base method.
func (m *MockRepository) Read(arg0 context.Context, arg1 *domain.SongInfo) (*domain.Song, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(*domain.Song)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockRepositoryMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockRepository)(nil).Read), arg0, arg1)
}

// ReadAllWithFilter mocks base method.
func (m *MockRepository) ReadAllWithFilter(arg0 context.Context, arg1 *domain.Song, arg2, arg3 int) ([]*domain.Song, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllWithFilter", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*domain.Song)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllWithFilter indicates an expected call of ReadAllWithFilter.
func (mr *MockRepositoryMockRecorder) ReadAllWithFilter(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllWithFilter", reflect.TypeOf((*MockRepository)(nil).ReadAllWithFilter), arg0, arg1, arg2, arg3)
}

// Update mocks base method.
func (m *MockRepository) Update(arg0 context.Context, arg1 *domain.SongInfo, arg2 *domain.Song) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), arg0, arg1, arg2)
}

// MockMusicInfo is a mock of MusicInfo interface.
type MockMusicInfo struct {
	ctrl     *gomock.Controller
	recorder *MockMusicInfoMockRecorder
}

// MockMusicInfoMockRecorder is the mock recorder for MockMusicInfo.
type MockMusicInfoMockRecorder struct {
	mock *MockMusicInfo
}

// NewMockMusicInfo creates a new mock instance.
func NewMockMusicInfo(ctrl *gomock.Controller) *MockMusicInfo {
	mock := &MockMusicInfo{ctrl: ctrl}
	mock.recorder = &MockMusicInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMusicInfo) EXPECT() *MockMusicInfoMockRecorder {
	return m.recorder
}

// FetchMusicInfo mocks base method.
func (m *MockMusicInfo) FetchMusicInfo(arg0 context.Context, arg1 *domain.SongInfo) (*domain.Song, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMusicInfo", arg0, arg1)
	ret0, _ := ret[0].(*domain.Song)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMusicInfo indicates an expected call of FetchMusicInfo.
func (mr *MockMusicInfoMockRecorder) FetchMusicInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMusicInfo", reflect.TypeOf((*MockMusicInfo)(nil).FetchMusicInfo), arg0, arg1)
}
